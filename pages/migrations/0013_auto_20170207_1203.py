# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2017-02-07 12:03
from __future__ import unicode_literals

import json

from django.db import connection, migrations


def convert_text(data, variant='markdown'):
    return {
        'type': 'text',
        'value': {
            'variant': 'markdown',
            'value': data.strip()
        }
    }


def convert_markdown(data):
    return [
        convert_text(data['value'])
    ]


def convert_split_panel(data):
    panel1, panel2 = data['value']
    return [{
        'type': 'splitContent',
        'value': {
            'children': [
                {
                    'type': 'splitArea',
                    'value': {
                        'children': [
                            convert_text(panel1)
                        ]
                    }
                },
                {
                    'type': 'splitArea',
                    'value': {
                        'children': [
                            convert_text(panel2)
                        ]
                    }
                }
            ]
        }
    }]


def convert_panel(data):
    return [{
        'type': 'panel',
        'value': {
            'header': [],
            'body': [
                convert_text(data['value']['main'])
            ],
            'footer': [
                convert_text(data['value']['footer'])
            ]
        }
    }]


def convert_figure_list(data):
    def convert_image(item_id):
        return {
            'type': 'image',
            'value': item_id
        }

    return [{
        'type': 'gallery',
        'value': {
            'children': [convert_image(item) for item in data['value']]
        }
    }]

CONVERTERS = {
    'markdown': convert_markdown,
    'splitPanel': convert_split_panel,
    'panel': convert_panel,
    'figureList': convert_figure_list,
}


def convert(stream_data):
    converted_data = []
    for item in json.loads(stream_data):
        converter = CONVERTERS[item['type']]
        converted_data += converter(item)
    return json.dumps(converted_data)


def forwards_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    EditorialPage = apps.get_model("pages", "EditorialPage")
    PageRevision = apps.get_model("wagtailcore", "PageRevision")
    editorial_meta = EditorialPage._meta

    with connection.cursor() as cursor:
        for page in EditorialPage.objects.all():
            cursor.execute(
                "SELECT header, main FROM {} WHERE {}_id = %s".format(
                    editorial_meta.db_table, editorial_meta.pk.name
                ),
                [page.id]
            )
            header, main = cursor.fetchone()
            new_header = convert(header)
            new_main = convert(main)

            # save page
            page.header = new_header
            page.main = new_main
            page.save()

            for rev in PageRevision.objects.filter(page_id=page.id):
                content_json = json.loads(rev.content_json)
                if 'header' not in content_json:  # format too old
                    break

                new_header = convert(content_json['header'])
                new_main = convert(content_json['main'])

                content_json['header'] = new_header
                content_json['main'] = new_main

                # save revision
                rev.content_json = json.dumps(content_json)
                rev.save()


class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0012_auto_20170207_1139'),
    ]

    operations = [
        migrations.RunPython(forwards_func),
    ]
